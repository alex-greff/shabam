const gulp = require("gulp");
const { exec, spawn } = require("child_process");

var nodeServer; // The node server process instance

// ---------------
// --- Helpers ---
// ---------------

function logCppWatcherMessage(message) {
    console.log('\x1b[36m%s\x1b[0m %s', "[C++ Watcher]", message);
}

function logJsWatcherMessage(message) {
    console.log('\x1b[32m%s\x1b[0m %s', "[JavaScript Watcher]", message);
}

// ------------------
// --- Operations ---
// ------------------

async function compileCpp() {
    await new Promise((resolve, reject) => {
        // Recompile the c++ code
        exec("rm -r build && npm run gyp:build", function(err, stdout, stderr) {
            console.log(stdout);
            console.error(stderr);
            
            if (err) {
                reject(err);
            } else {
                resolve();
            }
        });
    });
}

async function startNodeServer() {
    await new Promise((resolve) => {
        if (!nodeServer) {
            nodeServer = spawn("node", ["server.js"], { stdio: 'inherit' });
        }

        resolve();
    });
}

async function killNodeServer() {
    await new Promise((resolve, reject) => {
        if (nodeServer) {
            nodeServer.kill();

            nodeServer.on("close", function (code) {
                nodeServer = null;
                if (code === 8) {
                    reject();
                } else {
                    resolve();
                }
            });
        } else {
            resolve();
        }
    });
}

// -------------
// --- Tasks ---
// -------------

function watchCpp() {
    gulp.watch(["cpp/**/*.cpp"], { interval: 1000, usePolling: true }, async function() {
        logCppWatcherMessage("C++ file changes detected, recompiling...");

        try {
            await killNodeServer();
            await compileCpp();
            await startNodeServer();

            logCppWatcherMessage("Compilation successful!");
        } catch(err) {
            logCppWatcherMessage("Compilation failed!");
            console.error(err);
        }
    });
}

function watchJS() {
    gulp.watch(["./**/*.js"], { interval: 1000, usePolling: true }, async function() {
        logJsWatcherMessage("JavaScript file changes detected, restarting server...");

        try {
            await killNodeServer();
            await startNodeServer();

            logJsWatcherMessage("Restart successful!");
        } catch(err) {
            logJsWatcherMessage("Restart failed!");
            console.error(err);
        }
    });
}


// ---------------
// --- Exports ---
// ---------------

function defaultExport() {
    return gulp.parallel(startNodeServer, watchCpp, watchJS);
}

exports.default = defaultExport();


// ---------------
// --- Cleanup ---
// ---------------

process.on("exit", function() {
    killNodeServer();
});